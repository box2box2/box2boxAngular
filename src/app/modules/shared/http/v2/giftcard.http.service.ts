import { Observable, catchError, map, of } from 'rxjs';
import { PosGiftCardEnum } from '../../data/enums/posPaymentOption.enum';
import { GiftCardDTO, GiftCardOperationDTO, GiftCardOperationResultDTO } from '../../dtos/posOrder/posOrder.dto';
import { HttpClient } from '@angular/common/http';
import { CurrentDisplayValuesDTO } from '../../dtos/piggy/request.dto';
import { environment } from '../../../../../environments/environment';

export class GiftcardHttpService {
  constructor(protected _http: HttpClient) {}

  createGiftCard(amount: number, posOrderNumber: string, giftCardType: PosGiftCardEnum, barcode?: string): Observable<GiftCardDTO> {
    const newGiftCard: GiftCardOperationDTO = new GiftCardOperationDTO();
    newGiftCard.Transaction = 'CREATED';
    newGiftCard.Amount = amount;
    newGiftCard.Barcode = barcode ?? ''; // Will be auto-generated by backend if empty
    newGiftCard.Status = 'Active';
    newGiftCard.CardType = giftCardType.toString();
    newGiftCard.PosOrderNumber = posOrderNumber;

    console.log('createGiftCard', newGiftCard);

    const headers = {
      'X-Calling-Function': 'createGiftCard'
    };

    const url = `${environment.functionAppUrl}PosOrderGiftCardActivity`;
    return this._http.post<GiftCardDTO>(url, newGiftCard, { headers });
  }

  validateGiftCard(barcode: string): Observable<{ Barcode: string; Balance: number; Type: string } | null> {
    const validateRequest = {
      Transaction: 'CHECK',
      Barcode: barcode
    };

    const headers = {
      'X-Calling-Function': 'validateGiftCard'
    };

    const url = `${environment.functionAppUrl}PosOrderGiftCardActivity`;

    return this._http.post<{ Barcode: string; Balance: number; Type: string }>(url, validateRequest, { headers }).pipe(
      catchError(error => {
        if (error.status === 204) {
          return of(null);
        }
        throw error;
      })
    );
  }

  deductFromGiftCard(barcode: string, amount: number, posOrderNumber: string): Observable<GiftCardOperationResultDTO> {
    const deductRequest = {
      Transaction: 'Paid',
      Barcode: barcode,
      Amount: amount,
      Status: null,
      CardType: null,
      PosOrderNumber: posOrderNumber
    };

    const headers = {
      'X-Calling-Function': 'deductFromGiftCard'
    };

    const url = `${environment.functionAppUrl}PosOrderGiftCardActivity`;
    return this._http.post<GiftCardOperationResultDTO>(url, deductRequest, { headers });
  }

  updatePiggy(orderId: string, piggyInformation: CurrentDisplayValuesDTO): Observable<void> {
    const url = `${environment.functionAppUrl}PatchPiggy/${orderId}`;
    const headers = {
      'X-Calling-Function': 'updatePiggy'
    };

    return this._http.patch<boolean>(url, piggyInformation, { headers }).pipe(map(() => void 0));
  }
}
